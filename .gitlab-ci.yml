stages:
  - build
  - test
  - visualize
  - deploy

.myglobals:
  interruptible: true
  tags:
    - $RUNNERTAG

image: maven:3-openjdk-11

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DEPENDABOT_IMAGE: docker.io/$DEPENDABOTIMAGE

.dependabot-gitlab:
  tags:
    - $RUNNERTAG
  image:
    name: $DEPENDABOT_IMAGE
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    RAILS_ENV: production
    PACKAGE_MANAGER: $CI_JOB_NAME
    SETTINGS__GITLAB_URL: $CI_SERVER_URL
    SETTINGS__STANDALONE: "true"
  before_script:
    - echo "Version dependabot $DEPENDABOTIMAGE"
    - cd /home/dependabot/app
  script:
    - bundle exec rake "dependabot:update[$PROJECT_PATH,$PACKAGE_MANAGER,$DIRECTORY]"


cache:
  paths:
    - .m2/repository/
    - target/

dependabot:
  extends: .dependabot-gitlab
  only:
    - schedules

build:
  extends:
    - .myglobals
  stage: build
  cache:
    policy: push
  except:
    - schedules
  script:
    - mvn $MAVEN_CLI_OPTS clean compile

package:
  extends:
    - .myglobals
  stage: build
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "false"
  needs:
    - job: build
      artifacts: false
  except:
    - schedules
  before_script:
    - ls -l target/
  script:
    - mvn $MAVEN_CLI_OPTS clean package -Dmaven.test.skip=true
  after_script:
    - ls -l target/
    - echo "JARJOB=$CI_JOB_ID" > pvariables.env
  artifacts:
    paths:
      - target/jastacry-*.jar
    reports:
      dotenv: pvariables.env

test:
  extends:
    - .myglobals
  stage: test
  except:
    - schedules
  script:
    - mvn $MAVEN_CLI_OPTS test
    - cat target/site/jacoco/index.html | grep -o 'Total[^%]*%'
  after_script:
    - rm target/surefire-reports/TEST-org.jastacry.test.AllTests.xml || true
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    when: always
    reports:
      junit: target/surefire-reports/TEST-*.xml

bom:
  extends:
    - .myglobals
  stage: test
  except:
    - schedules
  variables:
    DTRACK_URL: ${DTRACK_URL}
    DTRACK_API: ${DTRACK_API}
    DTRACK_NAME: "jastacry"
  script:
    - mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
  after_script:
    - 'export DTRACK_VERSION=$(cut -d ":" -f 6 <VERSION.cpe)'
    - echo "projectName=${DTRACK_NAME}"
    - echo "projectVersion=${DTRACK_VERSION}"
    - 'curl -X POST ${DTRACK_URL}api/v1/bom -H "Content-Type: multipart/form-data" -H "X-API-Key: ${DTRACK_API}" -F "autoCreate=true" -F "projectName=${DTRACK_NAME}" -F "projectVersion=${DTRACK_VERSION}" -F bom=@target/bom.json'
  allow_failure: true
  artifacts:
    paths:
      - target/bom.json

sonarqube-check:
  extends:
    - .myglobals
  stage: test
  except:
    - schedules
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - git fetch --unshallow --all
  script:
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
  allow_failure: true
  only:
    - merge_requests
    - master
    - develop

coverity:
  extends:
    - .myglobals
  stage: test
  except:
    - schedules
  cache:
    key: coverity-$CI_COMMIT_REF_SLUG
    paths:
       - coverity_tool.tgz
  before_script:
    - mvn clean
    - wget -nc -q https://scan.coverity.com/download/linux64 --post-data "token=${COVERITY_TOKEN}&project=${COVERITY_PROJECT}" -O coverity_tool.tgz || true
    - ls -l coverity_tool.tgz
    - mkdir coverity-tool
    - tar xzf coverity_tool.tgz --strip-components=1 -C coverity-tool
    - export PATH="${CI_PROJECT_DIR}/coverity-tool/bin:$PATH"
    - 'export COVERITY_VERSION=$(cut -d ":" -f 6 <VERSION.cpe)'
  script:
    - cov-build --dir cov-int mvn $MAVEN_CLI_OPTS compile
    - tar czf /tmp/jastacry.tar.gz cov-int/
    - curl --form token=${COVERITY_TOKEN} --form email=${COVERITY_LOGIN} --form file=@/tmp/jastacry.tar.gz --form version="${COVERITY_VERSION}" --form description="${COVERITY_PROJECT}" https://scan.coverity.com/builds?project=${COVERITY_PROJECT}
  allow_failure: true
  artifacts:
    paths:
      - cov-int/


prepare_job:
  extends:
    - .myglobals
  stage: build
  except:
    - schedules
  only:
    variables:
      - '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG != null'
  script:
    - export TAGNOW=$CI_COMMIT_TAG
    - export TAGPREV=$(git describe --abbrev=0 $TAGNOW^)
    - export COMMITPREV=$(git rev-list -n 1 $TAGPREV)
    - echo "TAG=$(git describe --abbrev=0)" >> variables.env
    - echo "COMMITNOW=$CI_COMMIT_SHA" >> variables.env
    - echo "COMMITPREV=$COMMITPREV" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

coverage-jdk11:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or choose an existing stage like `deploy`.
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > target/site/cobertura.xml
  needs: ["test"]
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/site/cobertura.xml

release_job:
  extends:
    - .myglobals
  stage: deploy
  except:
    - schedules
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
    - job: package
      artifacts: true
  only:
    variables:
      - '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG != null'
  script:
    - echo "running release_job for $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'
    assets:
      links:
        - name: 'compiled jar'
          url: 'https://gitlab.kretschmann.software/stackedcrypto/JaStaCry/-/jobs/${JARJOB}/artifacts/download'

jdoc:
  extends:
    - .myglobals
  stage: build
  except:
    - schedules
  script:
    - mvn $MAVEN_CLI_OPTS site
  artifacts:
    paths:
      - target/site/

pages:
  extends:
    - .myglobals
  stage: deploy
  except:
    - schedules
  image: alpine
  before_script:
    - mkdir public
  script:
    - cp -a target/site/* public/
  artifacts:
    paths:
      - public
